diff --git a/CMakeLists.txt b/CMakeLists.txt
index f532411..e75bcf6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -54,7 +54,6 @@ find_package (BZip2 REQUIRED)
 find_package (ZLIB REQUIRED)
 find_package (OpenSSL REQUIRED)
 find_package (Threads REQUIRED)
-find_package (Gettext REQUIRED)
 find_package (Iconv REQUIRED)
 find_package (Git)
 find_package (Xattr)
@@ -374,12 +373,6 @@ if (JSONRPC_DAEMON)
 add_subdirectory (json)
 endif (JSONRPC_DAEMON)
 
-if(GETTEXT_FOUND)
-    option (UPDATE_PO "Update po files" OFF)
-    option (CREATE_MO "Create mo files" ON)
-    add_subdirectory(cmake)
-endif(GETTEXT_FOUND)
-
 message(STATUS "CMAKE_SYSTEM: ${CMAKE_SYSTEM}")
 message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
 message(STATUS "CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
@@ -394,7 +387,6 @@ message(STATUS "CMAKE will use this libs (and headers) during build:
     openssl (headers): ${OPENSSL_LIBRARIES} (${OPENSSL_INCLUDE_DIR})
     iconv (headers): ${ICONV_LIBRARIES} (${ICONV_INCLUDE_DIR})
     aspell (headers): ${ASPELL_LIBRARIES} (${ASPELL_INCLUDE_DIR})
-    gettext (headers): ${GETTEXT_LIBRARIES} (${GETTEXT_INCLUDE_DIR})
     pcre(cpp) (headers): ${PCRE_LIBRARIES} (${PCRE_INCLUDE_DIR})
     idna (headers): ${IDNA_LIBRARIES} (${IDNA_INCLUDE_DIR})
     ")
diff --git a/dcpp/CMakeLists.txt b/dcpp/CMakeLists.txt
index 754ec26..d73a78d 100644
--- a/dcpp/CMakeLists.txt
+++ b/dcpp/CMakeLists.txt
@@ -15,7 +15,7 @@ if (NOT LUA_SCRIPT)
   list (REMOVE_ITEM dcpp_srcs ${PROJECT_SOURCE_DIR}/ScriptManager.cpp)
 endif ()
 
-include_directories (${Boost_INCLUDE_DIR} ${BZIP2_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${GETTEXT_INCLUDE_DIR} ${LUA_INCLUDE_DIR} ${IDNA_INCLUDE_DIR})
+include_directories (${Boost_INCLUDE_DIR} ${BZIP2_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${GETTEXT_INCLUDE_DIR} ${ICONV_INCLUDE_DIR} ${LUA_INCLUDE_DIR} ${IDNA_INCLUDE_DIR})
 
 if (WIN32)
   set (LINK STATIC)
@@ -106,9 +106,3 @@ if (WITH_DEV_FILES)
     message (STATUS "Headers of libeiskaltdcpp will be installed to: ${EISKALTDCPP_INCLUDE_DIR}")
     install (FILES ${dcpp_hdrs} DESTINATION ${EISKALTDCPP_INCLUDE_DIR}/dcpp/)
 endif (WITH_DEV_FILES)
-
-foreach(LANG ${LANGUAGES})
-    install(FILES
-        ${dcpp_BINARY_DIR}/locale/${LANG}/LC_MESSAGES/libeiskaltdcpp.mo
-            DESTINATION ${LOCALE_DIR}/${LANG}/LC_MESSAGES)
-endforeach(LANG ${LANGUAGES})
diff --git a/dcpp/HashManager.cpp b/dcpp/HashManager.cpp
index 37bce93..914d1ef 100644
--- a/dcpp/HashManager.cpp
+++ b/dcpp/HashManager.cpp
@@ -876,10 +876,10 @@ bool HashManager::Hasher::fastHash(const string& filename, uint8_t* , TigerTree&
             break;
         }
 
-        if (posix_madvise(buf, size_read, POSIX_MADV_SEQUENTIAL | POSIX_MADV_WILLNEED) == -1) {
+/*        if (posix_madvise(buf, size_read, POSIX_MADV_SEQUENTIAL | POSIX_MADV_WILLNEED) == -1) {
             dcdebug("Error calling madvise for file %s: %s\n", filename.c_str(), Util::translateError(errno).c_str());
             break;
-        }
+        }*/
 
         if(maxHashSpeed > 0) {
             uint64_t now = GET_TICK();
diff --git a/dcpp/Util.h b/dcpp/Util.h
index 2844807..5638d95 100644
--- a/dcpp/Util.h
+++ b/dcpp/Util.h
@@ -36,7 +36,6 @@
 #include <map>
 #include "Text.h"
 
-extern "C" int  _nl_msg_cat_cntr;
 
 namespace dcpp {
 
@@ -459,10 +458,6 @@ public:
 #else
             setenv ("LANGUAGE", lang.c_str(), 1);
 #endif
-        /* Make change known.  */
-        {
-        ++_nl_msg_cat_cntr;
-        }
     }
 
     static bool getAway();
diff --git a/dcpp/stdinc.h b/dcpp/stdinc.h
index 5defd98..0837873 100644
--- a/dcpp/stdinc.h
+++ b/dcpp/stdinc.h
@@ -89,7 +89,6 @@ typedef unsigned __int64 uint64_t;
 #include <memory>
 #include <numeric>
 #include <limits>
-#include <libintl.h>
 
 #include <boost/format.hpp>
 #include <boost/scoped_array.hpp>
diff --git a/dht/CMakeLists.txt b/dht/CMakeLists.txt
index 8b2a8c0..a2bb86c 100644
--- a/dht/CMakeLists.txt
+++ b/dht/CMakeLists.txt
@@ -6,7 +6,7 @@ cmake_minimum_required (VERSION 2.6)
 
 aux_source_directory(${PROJECT_SOURCE_DIR} dht_srcs)
 
-include_directories (${Boost_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${BZIP2_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} ${LUA_INCLUDE_DIR})
+include_directories (${Boost_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${BZIP2_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} ${LUA_INCLUDE_DIR} ${GETTEXT_INCLUDE_DIR})
 
 if (WITH_DHT)
   add_definitions ( -DWITH_DHT )
diff --git a/eiskaltdcpp-daemon/CMakeLists.txt b/eiskaltdcpp-daemon/CMakeLists.txt
index 83f892a..f17d7f6 100644
--- a/eiskaltdcpp-daemon/CMakeLists.txt
+++ b/eiskaltdcpp-daemon/CMakeLists.txt
@@ -1,7 +1,7 @@
 project(${PROJECT_NAME_GLOBAL}-daemon)
 cmake_minimum_required(VERSION 2.6)
 # ######### General setup ##########
-include_directories(${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/.. ${Boost_INCLUDE_DIRS})
+include_directories(${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/.. ${Boost_INCLUDE_DIRS} ${GETTEXT_INCLUDE_DIR})
 
 aux_source_directory(${PROJECT_SOURCE_DIR} nasdc_SRCS)
 
@@ -68,6 +68,7 @@ list(APPEND LIBS
         ${JSONRPCLIBS}
         ${Boost_LIBRARIES}
         ${ICONV_LIBRARIES}
+        pthread
         )
 
 target_link_libraries (${PROJECT_NAME} dcpp ${LIBS})
diff --git a/eiskaltdcpp-daemon/utility.cpp b/eiskaltdcpp-daemon/utility.cpp
index 73a1d41..93e3059 100644
--- a/eiskaltdcpp-daemon/utility.cpp
+++ b/eiskaltdcpp-daemon/utility.cpp
@@ -18,6 +18,7 @@
 #include <syslog.h>
 #include <sys/stat.h>
 #endif
+#include <stdlib.h>
 #if (defined(__GNUC__) && !defined(__clang__)) && (__GNUC__ == 4 && __GNUC_MINOR__ < 7)
 #include <boost/lexical_cast.hpp>
 #define USE_BOOST_LEXICAL_CAST 1
@@ -89,7 +90,7 @@ bool splitMagnet(const string &magnet, string &name, int64_t &size, string &tth)
 #if defined(USE_BOOST_LEXICAL_CAST)
         size = boost::lexical_cast<long long>(params["xl"]);
 #else
-        size = stoll(params["xl"]);
+        size = strtoll(params["xl"].c_str(), nullptr, 0);
 #endif
         name = params["dn"];
         return true;
diff --git a/eiskaltdcpp-gtk/CMakeLists.txt b/eiskaltdcpp-gtk/CMakeLists.txt
index 97a0916..811b95b 100644
--- a/eiskaltdcpp-gtk/CMakeLists.txt
+++ b/eiskaltdcpp-gtk/CMakeLists.txt
@@ -156,8 +156,3 @@ else (APPLE)
   endif (UNIX)
 endif (APPLE)
 
-foreach(LANG ${LANGUAGES})
-    install(FILES
-        ${PROJECT_BINARY_DIR}/locale/${LANG}/LC_MESSAGES/${PROJECT_NAME}.mo
-            DESTINATION ${LOCALE_DIR}/${LANG}/LC_MESSAGES)
-endforeach(LANG ${LANGUAGES})
diff --git a/extra/CMakeLists.txt b/extra/CMakeLists.txt
index fbe8e8d..b983e5f 100644
--- a/extra/CMakeLists.txt
+++ b/extra/CMakeLists.txt
@@ -1,5 +1,6 @@
 project(extra)
 cmake_minimum_required(VERSION 2.6)
+
 include_directories(${PROJECT_SOURCE_DIR} ${GETTEXT_INCLUDE_DIR} ${Boost_INCLUDE_DIRS} ${MINIUPNP_INCLUDE_DIR} ${LUA_INCLUDE_DIR})
 aux_source_directory(${PROJECT_SOURCE_DIR} extra_SRCS)
 if (FREE_SPACE_BAR_C)
diff --git a/json/jsoncpp/src/json_value.cpp b/json/jsoncpp/src/json_value.cpp
index 28a0d8a..ef3df63 100644
--- a/json/jsoncpp/src/json_value.cpp
+++ b/json/jsoncpp/src/json_value.cpp
@@ -17,6 +17,7 @@
 #include <stdexcept>
 #include <cstring>
 #include <cassert>
+#include <stdlib.h>
 #ifdef JSON_USE_CPPTL
 # include <cpptl/conststring.h>
 #endif
@@ -745,7 +746,7 @@ Value::asInt() const
 #if defined(USE_BOOST_LEXICAL_CAST)
       return Int(boost::lexical_cast<int>(value_.string_));
 #else
-      return Int(std::stoi(value_.string_));
+      return Int(strtol(value_.string_, nullptr, 0));
 #endif
    case intValue:
       JSON_ASSERT_MESSAGE(isInt(), "LargestInt out of Int range");
@@ -775,7 +776,7 @@ Value::asUInt() const
 #if defined(USE_BOOST_LEXICAL_CAST)
       return UInt(boost::lexical_cast<unsigned long>(value_.string_));
 #else
-      return UInt(std::stoul(value_.string_));
+      return UInt(strtoul(value_.string_, nullptr, 0));
 #endif
    case intValue:
       JSON_ASSERT_MESSAGE(isUInt(), "LargestInt out of UInt range");
@@ -808,7 +809,7 @@ Value::asInt64() const
 #if defined(USE_BOOST_LEXICAL_CAST)
       return Int64(boost::lexical_cast<long long>(value_.string_));
 #else
-      return Int64(std::stoll(value_.string_));
+      return Int64(strtoll(value_.string_, nullptr, 0));
 #endif
    case intValue:
       return Int64(value_.int_);
@@ -838,7 +839,7 @@ Value::asUInt64() const
 #if defined(USE_BOOST_LEXICAL_CAST)
       return UInt64(boost::lexical_cast<unsigned long long>(value_.string_));
 #else
-      return UInt64(std::stoull(value_.string_));
+      return UInt64(strtoull(value_.string_, nullptr, 0));
 #endif
    case intValue:
       JSON_ASSERT_MESSAGE(isUInt64(), "LargestInt out of UInt64 range");
@@ -891,7 +892,7 @@ Value::asDouble() const
 #if defined(USE_BOOST_LEXICAL_CAST)
       return boost::lexical_cast<double>(value_.string_);
 #else
-      return std::stod(value_.string_);
+      return strtod(value_.string_, nullptr);
 #endif
    case intValue:
       return static_cast<double>( value_.int_ );
@@ -922,7 +923,7 @@ Value::asFloat() const
 #if defined(USE_BOOST_LEXICAL_CAST)
       return boost::lexical_cast<float>(value_.string_);
 #else
-      return std::stof(value_.string_);
+      return strtof(value_.string_, nullptr);
 #endif
    case intValue:
       return static_cast<float>( value_.int_ );
